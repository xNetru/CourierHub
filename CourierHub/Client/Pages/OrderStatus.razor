@page "/order/status/{orderCode}"

@using CourierHub.Shared.ApiModels
@using CourierHub.Shared.Enums
@using Radzen.Blazor

@inject HttpClient Http
@inject AuthenticationStateProvider Provider

<h1>Status zamówienia</h1>

<table class="table">
    <thead>
        <tr>
            <th>Serwis</th>
            <th>Kod</th>
            <th>Status</th>
        </tr>
    </thead>
    <tbody>
        <tr>
            <td style="white-space:nowrap">@service</td>
            <td style="white-space:nowrap">@orderCode</td>
            <td style="white-space:nowrap">@statusName</td>
        </tr>
    </tbody>
</table>

<div class="col" style="text-align: center;">
    <button class="btn btn-primary" @onclick="() => Cancel()" hidden="@(!status.IsCancelable)">Odwołaj zamówienie</button>
</div>
<div class="col" style="text-align: center;">
    <button class="btn btn-primary" @onclick="() => ToggleRatingActive()" hidden="@(statusType != StatusType.CouldNotDeliver && statusType != StatusType.Delivered)">Oceń serwis</button>
</div>

<div style="text-align: center; padding-top: 20px;" hidden="@(!ratingActive)">
    <textarea id="reviewTextArea" rows="10" cols="100" placeholder="Napisz swoją recenzję..."></textarea>

    <br />
        <div class="rz-p-12 rz-text-align-center">
            <RadzenRating @bind-Value=@rating />
        </div>
    <br />

    <button class="btn btn-primary">Zatwierdź ocenę</button>
</div>

@code {
    [Parameter]
    public string? orderCode { get; set; }
    private string? statusName;
    private string? service;
    private bool[] isGold = new bool[5];
    private int rating = 0;
    private ApiStatus status = new ApiStatus();
    private StatusType statusType;
    private bool ratingActive = false;

    protected async override Task OnInitializedAsync()
    {
        var x = await Http.GetAsync($"{Http.BaseAddress}Order/{orderCode}/status");
        Console.WriteLine(x.StatusCode + " GET ORDERS STATUS");
        var y = await Http.GetAsync($"{Http.BaseAddress}Order/{orderCode}/service");
        Console.WriteLine(x.StatusCode + " GET ORDERS SERVICE");
        if (x.IsSuccessStatusCode)
        {
            var c = await x.Content.ReadFromJsonAsync<ApiStatus>();
            var s = await y.Content.ReadAsStringAsync();
            if (c != null && s != null)
            {
                int startIndex = s.IndexOf("<title>") + "<title>".Length;
                int endIndex = s.IndexOf("</title>", startIndex);
                if (startIndex >= 0 && endIndex > startIndex)
                {
                    s = s.Substring(startIndex, endIndex - startIndex);
                }

                service = s;
                status = c;
                Enum.TryParse(status.Name, out statusType);
                int type = (int)statusType;
                StatusTypePL statusTypePL = (StatusTypePL)Enum.ToObject(typeof(StatusTypePL), type);
                statusName = Enum.GetName(typeof(StatusTypePL), statusTypePL);
                statusName = statusName?.Replace('_', ' ');
            }
            else
            {
                Console.WriteLine("BAD DESERIALIZATION");
            }
        }
        else
        {
            Console.WriteLine("FAIL");
        }
    }

    private async void Cancel()
    {
        // cancel from api controller
    }

    private void ToggleRatingActive(){
        ratingActive = !ratingActive;
    }
}
