@page "/history"

@using CourierHub.Shared.ApiModels

@inject HttpClient Http
@inject AuthenticationStateProvider Provider

<h1>Historia zapytań</h1>

<div style="height:600px;overflow-y:scroll;width:1200px;overflow-x:scroll">
    <table class="table">
        <thead>
            <tr>
                <th>Szerokość</th>
                <th>Długość</th>
                <th>Głębokość</th>
                <th>Data zapytania</th>
                <th>Miasto</th>
                <th>Ulica</th>
                <th>Numer</th>
                <th>Lokal</th>
                <th>Kod</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Inquires)
            {
                <tr>
                    <td>@item.Width</td>
                    <td>@item.Length</td>
                    <td>@item.Depth</td>
                    <td>@item.Datetime.ToString("dd-MM-yyyy")</td>
                    <td>
                        <p>z: &nbsp;&nbsp;@item.Source.City</p>
                        <p>do: @item.Destination.City</p>
                    </td>
                    <td>
                        <p>z: &nbsp;&nbsp;@item.Source.Street</p>
                        <p>do: @item.Destination.Street</p>
                    </td>
                    <td>
                        <p>z: &nbsp;&nbsp;@item.Source.Number</p>
                        <p>do: @item.Destination.Number</p>
                    </td>
                    <td>
                        <p>z: &nbsp;&nbsp;@item.Source.Flat</p>
                        <p>do: @item.Destination.Flat</p>
                    </td>
                    <td>
                        <p>z: &nbsp;&nbsp;@item.Source.PostalCode</p>
                        <p>do: @item.Destination.PostalCode</p>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>

 

@code {
    private IEnumerable<ApiInquire> Inquires = new List<ApiInquire>
    {
        new ApiInquire
        {
            Width=10,
            Length=20,
            Depth=30,
            Datetime=DateTime.Today,
            Source = new ApiAddress
            {
                City="abdsguyusuksc",
                Street="abdjgdkc",
                Number="1",
                Flat="1",
                PostalCode="00-000"
            },
            Destination = new ApiAddress
            {
                City="abddjkvhkjdhkc",
                Street="abxzhjjvkjfc",
                Number="1",
                Flat="1",
                PostalCode="00-000"
            }
        },
                new ApiInquire
        {
            Width=10,
            Length=20,
            Depth=30,
            Datetime=DateTime.Today,
            Source = new ApiAddress
            {
                City="abdsguyusuksc",
                Street="abdjgdkc",
                Number="1",
                Flat="1",
                PostalCode="00-000"
            },
            Destination = new ApiAddress
            {
                City="abddjkvhkjdhkc",
                Street="abxzhjjvkjfc",
                Number="1",
                Flat="1",
                PostalCode="00-000"
            }
        }
    };

    protected async override Task OnInitializedAsync() {
        var context = await Provider.GetAuthenticationStateAsync();
        var email = context.User.Claims.FirstOrDefault(c => c.Type == "email");
        string mail = "";
        if (email != null) {
            mail = email.Value;
        }
        else {
            Console.WriteLine("BAD MAIL");
            return;
        }

        var x = await Http.GetAsync($"{Http.BaseAddress}Client/{mail}/inquires/30");
        Console.WriteLine(x.StatusCode + " GET USER INQUIRES STATUS");

        if (x.IsSuccessStatusCode) {
            // tu się wywala, błędna deserializacja
            var c = await x.Content.ReadFromJsonAsync<IEnumerable<ApiInquire>>();
            if (c != null) {
                Inquires = c;
            }
            else {
                Console.WriteLine("BAD DESERIALIZATION");
            }
        }
        else {
            Console.WriteLine("FAIL");
        }
    }
}
