@page "/OfficeWorker/Orders"

@using CourierHub.Shared.ApiModels

@inject NavigationManager NavigationManager
@inject HttpClient Http
@inject AuthenticationStateProvider Provider

<h1>Historia zapytań</h1>

<div style="height:600px;overflow-y:scroll;width:1200px;overflow-x:scroll">
    <table class="table">
        <thead>
            <tr>
                <th>Mail</th>
                <th>Firma</th>
                <th>Cena</th>
                <th>Miasto</th>
                <th>Ulica</th>
                <th>Numer</th>
                <th>Lokal</th>
                <th>Kod</th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Orders)
            {
                <tr>
                    <td>@item.ClientEmail</td>
                    <td>@item.ClientCompany</td>
                    <td>@item.Price</td>
                    <td>@item.ClientAddress.City</td>
                    <td>@item.ClientAddress.Street</td>
                    <td>@item.ClientAddress.Number</td>
                    <td>@item.ClientAddress.Flat</td>
                    <td>@item.ClientAddress.PostalCode</td>
                    <td>
                        <button class="btn btn-primary" @onclick="() => Choose(item)">Wybierz</button>
                    </td>
                </tr>
            }
        </tbody>
    </table>
</div>



@code {
    private IEnumerable<ApiOrder> Orders = new List<ApiOrder>
    {
        new ApiOrder
        {
            Price = 10,
            ClientEmail = "bsjkj",
            ClientName = "Skam",
            ClientSurname = "Skam",
            ClientCompany = "Kurieroinator",
            ClientPhone = "3278378",
            ClientAddress = new ApiAddress
            {
                City="abdsguyusuksc",
                Street="abdjgdkc",
                Number="1",
                Flat="1",
                PostalCode="00-000"
            }
        }
    };

    private void Choose(ApiOrder item)
    {
        NavigationManager.NavigateTo("/OfficeWorker/Orders/Review");
    }

    // protected async override Task OnInitializedAsync()
    // {
    //     var x = await Http.GetAsync($"{Http.BaseAddress}Order");
    //     Console.WriteLine(x.StatusCode + " GET ORDERS STATUS");

    //     if (x.IsSuccessStatusCode)
    //     {
    //         var c = await x.Content.ReadFromJsonAsync<IEnumerable<ApiOrder>>();
    //         if (c != null)
    //         {
    //             Orders = c;
    //         }
    //         else
    //         {
    //             Console.WriteLine("BAD DESERIALIZATION");
    //         }
    //     }
    //     else
    //     {
    //         Console.WriteLine("FAIL");
    //     }
    // }

}
