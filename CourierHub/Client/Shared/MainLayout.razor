@inherits LayoutComponentBase
@using CourierHub.Shared.Models
@using System.Security.Claims
@using CourierHub.Shared.Enums;

@inject HttpClient Http
@inject AuthenticationStateProvider Provider
@inject NavigationManager Navigation

<div class="page">
    <div class="sidebar">
        <NavMenu />
    </div>
    <main>
        <div class="top-row px-4">
            <AuthorizeView Roles="NotAuthorized">
                 <NotAuthorized>
                     <a class="nav-link btn btn-link" href="authentication/login">Log in</a>
                 </NotAuthorized>
            </AuthorizeView>
            <AuthorizeView Roles="Client, OfficeWorker, Courier">
                <Authorized>
                    <a href="authentication/profile">Hello, @context.User.Identity?.Name</a>
                    <button class="nav-link btn btn-link" @onclick="BeginLogOut">Log out</button>
                </Authorized>
            </AuthorizeView>
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

@code {
    private void BeginLogOut() {
        Navigation.NavigateToLogout("authentication/logout");
    }

    private HttpResponseMessage? present;
    private bool isLogged = false;

    protected override async Task OnAfterRenderAsync(bool firstRender) {
        if (isLogged) { return; }
        var state = await Provider.GetAuthenticationStateAsync();
        SetNotAuthorized(state);

        var email = state.User.Claims.FirstOrDefault(c => c.Type == "email");
        if (email == null) { return; }

        present = await Http.SendAsync(new HttpRequestMessage(HttpMethod.Head, new Uri($"{Http.BaseAddress}User/{email.Value}")));
        if (!present.IsSuccessStatusCode) {
            string username = state.User.Identity!.Name!;
            string[] credentials = username.Split(" ");
            // register the user
            Navigation.NavigateTo("/registrationForm/"+credentials[0]+"/"+credentials[1]+"/"+email.Value);
            // we need to verify that user has indeed registred himself, if not he cannot stay "logged", but I don't know how
            //present = await Http.SendAsync(new HttpRequestMessage(HttpMethod.Head, new Uri($"{Http.BaseAddress}User/{email.Value}")));
            //if(!present.IsSuccessStatusCode) {
            //    BeginLogOut();
            //}
        } else {
            isLogged = true;
        }
    }

    private void SetNotAuthorized(AuthenticationState state) {
        var claim = new Claim(ClaimTypes.Role, "NotAuthorized");
        var identity = new ClaimsIdentity(new List<Claim> { claim }, "Roles");
        state.User.AddIdentity(identity);
    }

    private async Task SetRole(AuthenticationState state) {
        var email = state.User.Claims.FirstOrDefault(c => c.Type == "email");
        if (email == null) { return; }
        var user = await Http.GetFromJsonAsync<User?>(new Uri($"{Http.BaseAddress}User?email={email.Value}"));
        if (user == null) { return; }
        var type = (UserType)Enum.Parse(typeof(UserType), user.Type.ToString());
        var claim = new Claim(ClaimTypes.Role, type.ToString());
        var identity = new ClaimsIdentity(new List<Claim> { claim }, "Roles");
        state.User.AddIdentity(identity);
    }

}